// Automatically generated by MockGen. DO NOT EDIT!
// Source: auth.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	. "jobtracker/app/models"
)

// Mock of UserRepository interface
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockUserRepositoryRecorder
}

// Recorder for MockUserRepository (not exported)
type _MockUserRepositoryRecorder struct {
	mock *MockUserRepository
}

func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &_MockUserRepositoryRecorder{mock}
	return mock
}

func (_m *MockUserRepository) EXPECT() *_MockUserRepositoryRecorder {
	return _m.recorder
}

func (_m *MockUserRepository) FindByEmail(email string) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindByEmail", email)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockUserRepositoryRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByEmail", arg0)
}

func (_m *MockUserRepository) Store(_param0 User) error {
	ret := _m.ctrl.Call(_m, "Store", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUserRepositoryRecorder) Store(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Store", arg0)
}

// Mock of SessionRepository interface
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *_MockSessionRepositoryRecorder
}

// Recorder for MockSessionRepository (not exported)
type _MockSessionRepositoryRecorder struct {
	mock *MockSessionRepository
}

func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &_MockSessionRepositoryRecorder{mock}
	return mock
}

func (_m *MockSessionRepository) EXPECT() *_MockSessionRepositoryRecorder {
	return _m.recorder
}

func (_m *MockSessionRepository) FindByToken(token string) (*User, error) {
	ret := _m.ctrl.Call(_m, "FindByToken", token)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRepositoryRecorder) FindByToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FindByToken", arg0)
}

func (_m *MockSessionRepository) New(_param0 User) (string, error) {
	ret := _m.ctrl.Call(_m, "New", _param0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSessionRepositoryRecorder) New(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "New", arg0)
}
